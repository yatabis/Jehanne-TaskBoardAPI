// Code generated by MockGen. DO NOT EDIT.
// Source: open_task_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/yatabis/Jehanne/TaskBoard/domain"
	reflect "reflect"
)

// MockOpenTaskRepository is a mock of OpenTaskRepository interface
type MockOpenTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOpenTaskRepositoryMockRecorder
}

// MockOpenTaskRepositoryMockRecorder is the mock recorder for MockOpenTaskRepository
type MockOpenTaskRepositoryMockRecorder struct {
	mock *MockOpenTaskRepository
}

// NewMockOpenTaskRepository creates a new mock instance
func NewMockOpenTaskRepository(ctrl *gomock.Controller) *MockOpenTaskRepository {
	mock := &MockOpenTaskRepository{ctrl: ctrl}
	mock.recorder = &MockOpenTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenTaskRepository) EXPECT() *MockOpenTaskRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockOpenTaskRepository) FindAll() ([]*domain.OpenTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.OpenTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockOpenTaskRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockOpenTaskRepository)(nil).FindAll))
}

// Save mocks base method
func (m *MockOpenTaskRepository) Save(task *domain.OpenTask) (*domain.OpenTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", task)
	ret0, _ := ret[0].(*domain.OpenTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockOpenTaskRepositoryMockRecorder) Save(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOpenTaskRepository)(nil).Save), task)
}
